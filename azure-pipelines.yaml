trigger:
  - develop

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: aleo-program-ids
  - name: aleoProgramIdsGroupId
    value: 10
  - name: devOpsOrg
    value: $(System.TeamFoundationCollectionUri)
  - name: devOpsProject
    value: $(System.TeamProject)
  - name: commitHash
    value: $(Build.SourceVersion)
  - name: buildId
    value: $(Build.BuildId)
  - name: privateKey
    value: $(PRIVATE_KEY)
  - name: dockerRegistryUrl
    value: $(DOCKER_REGISTRY_URL)
  - name: vmProject
    value: $(VM_PROJECT)
  - name: containerServiceAccountName
    value: $(CONTAINER_SERVICE_ACCOUNT_NAME)
  - name: containerServiceAccountAddress
    value: $(containerServiceAccountName)@$(vmProject).iam.gserviceaccount.com
  - name: runAleoDeployments
    value: $(RUN_ALEO_DEPLOYMENTS)
  - name: GIT_MIRROR_URL
    value: $(gitMirrorUrl)
  - name: GIT_MIRROR_TOKEN
    value: $(gitMirrorToken)

stages:
  - stage: check_updated_programs
    displayName: Check updated programs that have to be deployed
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['runAleoDeployments'], 'True'))
    jobs:
      - job: run_check_script
        displayName: Running script to check updated programs
        steps:
          - script: |
              files=$(git diff HEAD HEAD~ --name-only)

              while IFS= read -r name; do
                  echo $name
                  if [[ $name =~ ^contracts/boloney_match_summary/* ]]; then
                      echo "##vso[task.setvariable variable=boloneyMatchSummaryUpdated;isoutput=true]True"
                  elif [[ $name =~ ^contracts/boloney_match/* ]]; then
                      echo "##vso[task.setvariable variable=boloneyMatchUpdated;isoutput=true]True"
                  elif [[ $name =~ ^contracts/dice/* ]]; then
                      echo "##vso[task.setvariable variable=diceUpdated;isoutput=true]True"
                  elif [[ $name =~ ^contracts/power_up_2a/* ]]; then
                      echo "##vso[task.setvariable variable=powerUp2Updated;isoutput=true]True"
                  elif [[ $name =~ ^contracts/power_up/* ]]; then
                      echo "##vso[task.setvariable variable=powerUpUpdated;isoutput=true]True"
                  elif [[ $name =~ ^contracts/rng/* ]]; then
                      echo "##vso[task.setvariable variable=rngUpdated;isoutput=true]True"
                  elif [[ $name =~ ^contracts/hash_chain/* ]]; then
                      echo "##vso[task.setvariable variable=hashChainUpdated;isoutput=true]True"
                  fi
              done <<<"$files"
            name: UpdatedPrograms

  - stage: build_and_deploy_leo_programs_stage
    displayName: Build and deploy Leo programs
    dependsOn: check_updated_programs
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    variables:
      boloneyMatchUpdated: $[stageDependencies.check_updated_programs.run_check_script.outputs['UpdatedPrograms.boloneyMatchUpdated']]
      boloneyMatchSummaryUpdated: $[stageDependencies.check_updated_programs.run_check_script.outputs['UpdatedPrograms.boloneyMatchSummaryUpdated']]
      diceUpdated: $[stageDependencies.check_updated_programs.run_check_script.outputs['UpdatedPrograms.diceUpdated']]
      powerUpUpdated: $[stageDependencies.check_updated_programs.run_check_script.outputs['UpdatedPrograms.powerUpUpdated']]
      rngUpdated: $[stageDependencies.check_updated_programs.run_check_script.outputs['UpdatedPrograms.rngUpdated']]
      hashChainUpdated: $[stageDependencies.check_updated_programs.run_check_script.outputs['UpdatedPrograms.hashChainUpdated']]
      powerUp2Updated: $[stageDependencies.check_updated_programs.run_check_script.outputs['UpdatedPrograms.powerUp2Updated']]
    jobs:
      - job: build_and_deploy_leo_programs_job
        displayName: Build and deploy programs
        condition: succeeded()
        steps:
          - task: DownloadSecureFile@1
            name: authkey
            displayName: "Download Service Account Key"
            inputs:
              secureFile: $(containerServiceAccountName).json
              retryCount: "2"
          - script: gcloud auth activate-service-account $(containerServiceAccountAddress) --key-file=$(authkey.secureFilePath)
            displayName: Activate Service Account
          - script: gcloud --quiet auth configure-docker $(dockerRegistryUrl)
            displayName: Configure Docker Account
          - script: echo $(System.AccessToken) | az devops login --organization $(devOpsOrg)
            displayName: Logging in to DevOps organization

          - script: |
              docker build -f Dockerfile.program . \
                --build-arg APP_NAME=boloney_match \
                --build-arg PRIVATE_KEY=$(privateKey) \
                --build-arg BUILD_ID=$(buildId) \
                --build-arg FEE=600000 \
                --build-arg ZK_GAMING_ALEO="eu.gcr.io/web3-335312/aleo/zk-gaming-snarkos:latest"
            displayName: Boloney match Docker build
            condition: and(succeeded(), eq(variables['boloneyMatchUpdated'], 'True'))
            retryCountOnTaskFailure: 3
          - script: echo "##vso[task.setvariable variable=boloneyMatchVersion;isoutput=true]$(buildId)"
            displayName: Update boloney match version locally
            condition: and(succeeded(), eq(variables['boloneyMatchUpdated'], 'True'))
          - script: |
              az pipelines variable-group variable update \
                --group-id $(aleoProgramIdsGroupId) \
                --name boloneyMatchVersion \
                --org $(devOpsOrg) \
                --project $(devOpsProject) \
                --value $(buildId)
            displayName: Update boloney match version in variable group
            condition: and(succeeded(), eq(variables['boloneyMatchUpdated'], 'True'))
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - script: |
              docker build -f Dockerfile.program . \
              --build-arg APP_NAME=boloney_match_summary \
              --build-arg PRIVATE_KEY=$(privateKey) \
              --build-arg BUILD_ID=$(buildId) \
              --build-arg FEE=600000 \
              --build-arg ZK_GAMING_ALEO="eu.gcr.io/web3-335312/aleo/zk-gaming-snarkos:latest"
            displayName: Boloney match summary Docker build
            condition: and(succeeded(), eq(variables['boloneyMatchSummaryUpdated'], 'True'))
            retryCountOnTaskFailure: 3
          - script: echo "##vso[task.setvariable variable=boloneyMatchSummaryVersion;isoutput=true]$(buildId)"
            displayName: Update boloney match summary version locally
            condition: and(succeeded(), eq(variables['boloneyMatchSummaryUpdated'], 'True'))
          - script: |
              az pipelines variable-group variable update \
                --group-id $(aleoProgramIdsGroupId) \
                --name boloneyMatchSummaryVersion \
                --org $(devOpsOrg) \
                --project $(devOpsProject) \
                --value $(buildId)
            displayName: Update boloney match summary version in variable group
            condition: and(succeeded(), eq(variables['boloneyMatchSummaryUpdated'], 'True'))
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - script: |
              docker build -f Dockerfile.program . \
                --build-arg APP_NAME=dice \
                --build-arg PRIVATE_KEY=$(privateKey) \
                --build-arg BUILD_ID=$(buildId) \
                --build-arg FEE=2400000 \
                --build-arg ZK_GAMING_ALEO="eu.gcr.io/web3-335312/aleo/zk-gaming-snarkos:latest"
            displayName: Dice Docker build
            condition: and(succeeded(), eq(variables['diceUpdated'], 'True'))
            retryCountOnTaskFailure: 3
          - script: echo "##vso[task.setvariable variable=diceVersion;isoutput=true]$(buildId)"
            displayName: Update dice version locally
            condition: and(succeeded(), eq(variables['diceUpdated'], 'True'))
          - script: |
              az pipelines variable-group variable update \
                --group-id $(aleoProgramIdsGroupId) \
                --name diceVersion \
                --org $(devOpsOrg) \
                --project $(devOpsProject) \
                --value $(buildId)
            displayName: Update dice version in variable group
            condition: and(succeeded(), eq(variables['diceUpdated'], 'True'))
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - script: |
              docker build -f Dockerfile.program . \
                --build-arg APP_NAME=power_up \
                --build-arg PRIVATE_KEY=$(privateKey) \
                --build-arg BUILD_ID=$(buildId) \
                --build-arg FEE=2400000 \
                --build-arg ZK_GAMING_ALEO="eu.gcr.io/web3-335312/aleo/zk-gaming-snarkos:latest"
            displayName: Power-up Docker build
            condition: and(succeeded(), eq(variables['powerUpUpdated'], 'True'))
            retryCountOnTaskFailure: 3
          - script: echo "##vso[task.setvariable variable=powerUpVersion;isoutput=true]$(buildId)"
            displayName: Update power-up version locally
            condition: and(succeeded(), eq(variables['powerUpUpdated'], 'True'))
          - script: |
              az pipelines variable-group variable update \
                --group-id $(aleoProgramIdsGroupId) \
                --name powerUpVersion \
                --org $(devOpsOrg) \
                --project $(devOpsProject) \
                --value $(buildId)
            displayName: Update power-up version in variable group
            condition: and(succeeded(), eq(variables['powerUpUpdated'], 'True'))
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - script: |
              docker build -f Dockerfile.program . \
                --build-arg APP_NAME=rng \
                --build-arg PRIVATE_KEY=$(privateKey) \
                --build-arg BUILD_ID=$(buildId) \
                --build-arg FEE=600000 \
                --build-arg ZK_GAMING_ALEO="eu.gcr.io/web3-335312/aleo/zk-gaming-snarkos:latest"
            displayName: RNG Docker build
            condition: and(succeeded(), eq(variables['rngUpdated'], 'True'))
            retryCountOnTaskFailure: 3
          - script: echo "##vso[task.setvariable variable=rngVersion;isoutput=true]$(buildId)"
            displayName: Update RNG version locally
            condition: and(succeeded(), eq(variables['rngUpdated'], 'True'))
          - script: |
              az pipelines variable-group variable update \
                --group-id $(aleoProgramIdsGroupId) \
                --name rngVersion \
                --org $(devOpsOrg) \
                --project $(devOpsProject) \
                --value $(buildId)
            displayName: Update RNG version in variable group
            condition: and(succeeded(), eq(variables['rngUpdated'], 'True'))
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - script: |
              docker build -f Dockerfile.program . \
                --build-arg APP_NAME=hash_chain \
                --build-arg PRIVATE_KEY=$(privateKey) \
                --build-arg BUILD_ID=$(buildId) \
                --build-arg FEE=600000 \
                --build-arg ZK_GAMING_ALEO="eu.gcr.io/web3-335312/aleo/zk-gaming-snarkos:latest"
            displayName: Hash chain Docker build
            condition: and(succeeded(), eq(variables['hashChainUpdated'], 'True'))
            retryCountOnTaskFailure: 3
          - script: echo "##vso[task.setvariable variable=hashChainVersion;isoutput=true]$(buildId)"
            displayName: Update hash chain version locally
            condition: and(succeeded(), eq(variables['hashChainUpdated'], 'True'))
          - script: |
              az pipelines variable-group variable update \
                --group-id $(aleoProgramIdsGroupId) \
                --name hashChainVersion \
                --org $(devOpsOrg) \
                --project $(devOpsProject) \
                --value $(buildId)
            displayName: Update hash chain version in variable group
            condition: and(succeeded(), eq(variables['hashChainUpdated'], 'True'))
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - script: |
              docker build -f Dockerfile.program . \
                --build-arg APP_NAME=power_up_2a \
                --build-arg PRIVATE_KEY=$(privateKey) \
                --build-arg BUILD_ID=$(buildId) \
                --build-arg FEE=2400000 \
                --build-arg ZK_GAMING_ALEO="eu.gcr.io/web3-335312/aleo/zk-gaming-snarkos:latest"
            displayName: Power-up 2 Docker build
            condition: and(succeeded(), eq(variables['powerUp2Updated'], 'True'))
            retryCountOnTaskFailure: 3
          - script: echo "##vso[task.setvariable variable=powerUp2Version;isoutput=true]$(buildId)"
            displayName: Update power-up 2 version locally
            condition: and(succeeded(), eq(variables['powerUp2Updated'], 'True'))
          - script: |
              az pipelines variable-group variable update \
                --group-id $(aleoProgramIdsGroupId) \
                --name powerUp2Version \
                --org $(devOpsOrg) \
                --project $(devOpsProject) \
                --value $(buildId)
            displayName: Update power-up 2 version in variable group
            condition: and(succeeded(), eq(variables['powerUp2Updated'], 'True'))
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  - stage: build_and_deploy
    displayName: Build and Deploy
    dependsOn: build_and_deploy_leo_programs_stage
    condition: and(or(succeeded(), ne(variables['runAleoDeployments'], 'True')), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: build_and_deploy
        displayName: Build Docker images and deploy through Kubernetes
        steps:
          - script: curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && sudo install skaffold /usr/local/bin/
            displayName: Install Skaffold
          - task: DownloadSecureFile@1
            name: authkey
            displayName: "Download Service Account Key"
            inputs:
              secureFile: $(containerServiceAccountName).json
              retryCount: "2"
          - script: gcloud auth activate-service-account $(containerServiceAccountAddress) --key-file=$(authkey.secureFilePath)
            displayName: Activate Service Account
          - script: gcloud --quiet auth configure-docker $(dockerRegistryUrl)
            displayName: Configure Docker Account
          - task: Kubernetes@1
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceEndpoint: "gke-zk-gaming"
              namespace: "zk-gaming-tk-staging"
              command: "login"
          - script: |
              skaffold run --filename=skaffold.snarkos.yaml
            displayName: Build and push Aleo Docker images
            enabled: false
          - script: |
              sed 's/SEDSUBST_BOLONEY_MATCH_VERSION/"$(boloneyMatchVersion)"/g' deployment/staging/deployment.template.yaml > deployment/staging/deployment.yaml
              sed -i 's/SEDSUBST_BOLONEY_MATCH_SUMMARY_VERSION/"$(boloneyMatchSummaryVersion)"/g' deployment/staging/deployment.yaml
              sed -i 's/SEDSUBST_DICE_VERSION/"$(diceVersion)"/g' deployment/staging/deployment.yaml
              sed -i 's/SEDSUBST_POWER_UP_VERSION/"$(powerUpVersion)"/g' deployment/staging/deployment.yaml
              sed -i 's/SEDSUBST_RNG_VERSION/"$(rngVersion)"/g' deployment/staging/deployment.yaml
              sed -i 's/SEDSUBST_HASH_CHAIN_VERSION/"$(hashChainVersion)"/g' deployment/staging/deployment.yaml
            displayName: Setting program ids in Kubernetes deployment
          - script: |
              skaffold run --filename=skaffold.staging.yaml
            displayName: Build and push Toolkit Docker images

  - stage: mirror
    displayName: Mirror
    dependsOn:
      - build_and_deploy
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job:
        displayName: Mirror repository
        steps:
          - task: CmdLine@2
            displayName: Push repository to mirror
            continueOnError: true
            inputs:
              script: 'git -c http.$(GIT_MIRROR_URL).extraheader="AUTHORIZATION: basic $(GIT_MIRROR_TOKEN)" push --force $(GIT_MIRROR_URL) HEAD:$(Build.SourceBranch)'
